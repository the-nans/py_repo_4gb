"""
Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе
должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять
увеличение, уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток больше
нуля, иначе выводить соответствующее сообщение.
Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих
двух клеток.
Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
ячеек этих двух клеток.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
*****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
*****\n*****\n*****.

"""
from random import randint
class CellColony:
    def __init__(self, population : int):
        self.population = population

    def __add__(self, other):
        return CellColony(self.population + other.population)

    def __sub__(self, other):
        if self.population > other.population:
            return CellColony(self.population + other.population)
        elif self.population == other.population:
            print('Они взаимоуничтожились')
        else:
            print('Первая популяция слишком мала чтобы победить вторую')
        return CellColony(0)

    def __mul__(self, other):
        return CellColony(self.population * other.population)

    def __truediv__(self, other):
        if 0 < other.population < self.population:
            return CellColony(self.population // other.population)
        else:
            print('Первая популяция слишком мала - на всех во второй не хватит')
            return CellColony(0)

    def make_order(self, row):
        r = ''
        for i in range(1, self.population+1):
            r = f"{r} *"
            if i % row == 0 :
                r = f"{r}\n"
        print(r)

if __name__ == "__main__":
    col1 = CellColony(3)
    col2 = CellColony(12)
    summy = col1 + col2
    sub_ok = col2 - col1
    sub_not_ok = col1 - col2
    div_ok = col2/col1
    div_not_ok = col1/col2
    multy = col1 * col2
    ops = [summy, sub_ok, sub_not_ok, div_ok, div_not_ok, multy]
    for el in ops:
        print('-----')
        el.make_order(randint(3,10))